/* read only */
/* before registering the employee of this type first add him as a user in users table */

/***************************************************************************************************/

/* delete not allowed, insert and update allowed */
CREATE TABLE employees_holding_post_not_associated_with_department(
    post_email_id VARCHAR NOT NULL PRIMARY KEY,
    password TEXT NOT NULL,
    username VARCHAR(255) REFERENCES users(username) ON DELETE RESTRICT,
    start_date DATE DEFAULT CURRENT_DATE NOT NULL,
    role_name VARCHAR(100) REFERENCES roles_not_associated_with_department(role_name) ON DELETE CASCADE NOT NULL
);

CREATE TABLE changed_employees_on_post_not_associated_with_department(
    post_email_id VARCHAR REFERENCES employees_holding_post_not_associated_with_department(post_email_id) NOT NULL,
    username VARCHAR(255) REFERENCES is_user_deleted(username),
    start_date DATE NOT NULL,
    end_date DATE DEFAULT CURRENT_DATE NOT NULL
);

/***************************************************************************************************/

CREATE OR REPLACE FUNCTION populate_changed_employees() RETURNS TRIGGER AS
$$
BEGIN
    IF OLD.username <> NEW.username THEN
        INSERT INTO changed_employees_on_post_not_associated_with_department(post_email_id,username,start_date) VALUES (OLD.post_email_id, OLD.username, OLD.start_date);
    END IF;
    RETURN NEW;   
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER populate_changed_employees_trigger
BEFORE UPDATE 
ON employees_holding_post_not_associated_with_department
FOR EACH ROW
EXECUTE PROCEDURE populate_changed_employees();